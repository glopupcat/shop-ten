###############################################################################
# PaintHub Frontend Environment (.env.local example)
#
# Copy this file to .env.local and adjust values. All NEXT_PUBLIC_* are exposed
# to the browser. Lines starting with # are comments.
###############################################################################

# -----------------------------------------------------------------------------
# Quick Start (Frontend only)
# -----------------------------------------------------------------------------
# 1) cd front
# 2) npm install
# 3) cp .env.example .env.local
# 4) Set NEXT_PUBLIC_API_ORIGIN to your backend or leave empty for Next API
#    routes (not used here) â€” we use rewrites to proxy /api and /uploads.
# 5) npm run dev (defaults to PORT=3000)
# 6) Open http://localhost:${PORT:-3000}
#
# Common checks:
# - If API calls fail, verify NEXT_PUBLIC_API_ORIGIN and backend availability
# - For Builder.io live preview, add your preview origin to NEXT_PUBLIC_ALLOWED_DEV_ORIGINS
# - To serve uploaded files via frontend, /uploads is proxied to the backend

# -----------------------------------------------------------------------------
# Quick Start (Frontend + Backend together)
# -----------------------------------------------------------------------------
# From repository root (one process that starts both):
#   sh -c "cd server && npm run build && node dist/main.js & cd front && npm run dev"
#
# Or in two terminals:
#   # Terminal A (backend)
#   cd server && npm install && npm run build && npm start   # http://localhost:4000
#   # Terminal B (frontend)
#   cd front && npm install && npm run dev                   # http://localhost:3000
#
# Proxy model:
# - Frontend uses Next.js rewrites configured in front/next.config.mjs
# - All requests to /api/* and /uploads/* are forwarded to NEXT_PUBLIC_API_ORIGIN
# - Keep NEXT_PUBLIC_API_ORIGIN aligned with the backend host/port

# -----------------------------------------------------------------------------
# Core Variables
# -----------------------------------------------------------------------------
# Backend origin used by Next.js rewrites. When set, /api/* and /uploads/* will
# be proxied to this origin (see next.config.mjs rewrites()).
NEXT_PUBLIC_API_ORIGIN=http://localhost:4000

# Frontend dev server port for `next dev`.
# Next.js honors PORT when running `npm run dev`.
PORT=3000

# Allow dev-time cross-origin access for preview tools (comma-separated list).
# Example: your Builder.io preview domain.
NEXT_PUBLIC_ALLOWED_DEV_ORIGINS=http://localhost:3000

# Optional: disable Next telemetry locally
NEXT_TELEMETRY_DISABLED=1

# -----------------------------------------------------------------------------
# Upload-related (frontend expectations)
# -----------------------------------------------------------------------------
# Upload UI accepts these types by default (client-side validation only):
# Note: backend enforces its own validation and can be stricter.
# (Kept here as documentation; not parsed by code.)
# ACCEPTED_IMAGE_TYPES=image/jpeg,image/png,image/webp,image/gif
# MAX_IMAGE_SIZE_MB=5

# -----------------------------------------------------------------------------
# Authentication (dev/testing notes)
# -----------------------------------------------------------------------------
# Frontend adds Authorization header if token exists in localStorage under one
# of these keys: ecommerce_auth_token, auth_token, admin-token.
# In dev, the backend can accept mock_* tokens if ALLOW_MOCK_TOKENS=true
# (configured on the server). Store a value like mock_local_admin to test.

###############################################################################
# Project Architecture (Frontend Overview)
###############################################################################
# Tech Stack
# - Next.js App Router (front/app/*) and hybrid usage of React Router (shimmed)
# - TypeScript, Tailwind
# - Redux Toolkit for state management (front/src/app/store.ts)
# - i18next for localization (front/src/shared/config/i18n.ts)
# - Component library in front/src/components and front/src/shared/ui
# - API layer in front/src/shared/api (axios instance and domain clients)
# - Pages (app-pages) used by Next routes under front/app/*

# Key Directories
# - front/app/*                     -> Next.js route segments and pages
# - front/src/app/*                 -> AppProvider, store, hooks
# - front/src/app-pages/*           -> Page-level React components (Admin, Auth, etc.)
# - front/src/features/*            -> Redux slices (auth, cart, catalog, currency, theme)
# - front/src/shared/api/*          -> API clients (http.ts/axios, products, categories, images)
# - front/src/shared/themes/*       -> Theme providers and CSS variables
# - front/src/widgets/*             -> Complex UI blocs (header, footer, grids)

# How routing works
# - Next.js app routes under front/app map to components from front/src/app-pages
# - react-router-dom is aliased to a shim (see next.config.mjs) for gradual migration

###############################################################################
# Data Flow (Redux Toolkit)
###############################################################################
# 1) UI Component dispatches an action or async thunk (e.g., login, load products)
# 2) Thunk calls API client from front/src/shared/api/* via a shared axios instance
#    (front/src/shared/config/api.ts)
#    - Request interceptor attaches Authorization header from localStorage
#    - Base path is /api but is proxied to NEXT_PUBLIC_API_ORIGIN
# 3) On success, reducers update the appropriate slice in the store
# 4) Components subscribe via useSelector/useAppSelector and re-render
#
# Store definition: front/src/app/store.ts
# - Slices: cart, favourites, auth, catalog, theme, currency
# - DevTools enabled in non-production
#
# Notable slices:
# - features/auth/authSlice.ts        -> mock login/register flows; persists token/user
# - features/catalog/catalogSlice.ts  -> category/product listing filters
# - features/cart/cartSlice.ts        -> cart operations
# - features/currency/currencySlice.ts-> currency and formatting
# - features/theme-switcher/themeSlice.ts -> theme mode
#
# API layer:
# - shared/config/api.ts creates axios instance (baseURL=/api, adds token)
# - shared/api/products.ts, categories.ts, images.ts define domain-specific calls
# - images.ts uses fetch for multipart uploads to /api/files/images and .../many

###############################################################################
# Module Documentation (Frontend)
###############################################################################
# Auth
# - Login/Register pages under src/app-pages/auth
# - Tokens saved to localStorage; axios interceptor reads them automatically
# - Dev: can set a mock_* token to test protected endpoints if backend allows
#
# Products (Admin)
# - Admin forms under src/app-pages/admin/ProductForm.tsx
# - ImageUploader component supports drag&drop and URL add
# - On file select, uploads to /api/files/images via ImageUploadAPI
# - Saved file publicPath becomes Product.images entry
#
# Categories (Admin)
# - Admin form under src/app-pages/admin/CategoryForm.tsx
# - Single image upload field; result saved to Category.image
#
# Internationalization
# - Resources in src/shared/locales/{en,es}/translation.json
# - Default language set in src/shared/config/i18n.ts (defaultLanguage='en')
# - Language persisted in localStorage key: language
#
# Theming
# - ThemeProvider in src/shared/themes/ThemeProvider.tsx
# - CSS variables per theme in src/shared/themes/*.css

###############################################################################
# Troubleshooting
###############################################################################
# - 401 on uploads: ensure token exists in localStorage and has files:upload permission
# - CORS/preview warnings: add the preview origin to NEXT_PUBLIC_ALLOWED_DEV_ORIGINS
# - Uploads not visible: ensure backend serves /uploads and frontend rewrites include /uploads
# - API 404: check NEXT_PUBLIC_API_ORIGIN and backend /api routes are up
